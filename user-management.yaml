---
openapi: 3.0.0
info:
  title: User Management Api
  description: |
    This is a sample User Management Api
  contact:
    email: vnikabadze@unisens.ge
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/vaskania/User-Management/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /users:
    get:
      tags:
      - User
      description: Get all users
      responses:
        "200":
          description: Get an array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/register:
    post:
      tags:
      - User
      summary: Create new user
      description: This can only be done with unique username
      responses:
        "201":
          description: New user was created successfully
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
      - User
      summary: Logs user
      description: The username for login
      responses:
        "200":
          description: logged in successfully'
        "400":
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      summary: Get user by id
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
          description: The id that needs to be fetched.
      responses:
        "200":
          description: User profile fetched successfully
        "404":
          description: User not found
    delete:
      tags:
      - user
      description: This can only be done by the logged in user.
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
          description: The id that needs to be fetched.
      responses:
        "200":
          description: User profile deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/update-profile/{id}:
    put:
      tags:
      - User
      summary: Updated user firstName or lastName
      description: This can only be done by the logged in user.
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
          description: The id that needs to be fetched.
      responses:
        "200":
          description: Updated user object
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/update-password/{id}:
    put:
      tags:
      - User
      summary: Updated user password
      description: This can only be done by the logged in user.
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
          description: The id that needs to be fetched.
      responses:
        "200":
          description: Updated user password
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        salt:
          type: string
        delete:
          type: boolean
